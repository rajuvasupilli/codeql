on:
  workflow_dispatch:
  push:
    branches:
      - THEP-56

jobs:
  codeql:
    name: Run CodeQL Analysis
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: none
            file-filter: '.java .kt'
          - language: javascript-typescript
            build-mode: none
            file-filter: '.js .ts'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get list of modified files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          separator: ' '
          json: true

      - name: Display changed files
        run: |
          echo "Modified files: ${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Skip analysis if no relevant files changed
        id: skip-analysis
        run: |
          pattern="${{ matrix.file-filter }}"
          grep_pattern=$(echo "$pattern" | tr ' ' '\n' | sed 's/^/-e /' | tr '\n' ' ')
          echo "GREP_PATTERN: '$grep_pattern'"
          if ! echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr -d '[]"' | tr ',' '\n' | grep $grep_pattern; then
            echo "No relevant files changed. Skipping analysis."
            echo "skip=true" >> $GITHUB_ENV
          fi

      - name: Filter files for CodeQL analysis
        id: filter-files
        run: |
          grep_pattern=$(echo "${{ matrix.file-filter }}" | tr ' ' '\n' | sed 's/^/-e /' | tr '\n' ' ')
          files_to_analyze=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr -d '[]"' | tr ',' '\n' | grep $grep_pattern || true)
          if [ -z "$files_to_analyze" ]; then
            echo "No relevant files found for analysis."
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "Files to analyze: $files_to_analyze"
            echo "FILES_TO_ANALYZE=$files_to_analyze" >> $GITHUB_ENV
          fi

      - name: Install Node.js (for JavaScript)
        if: matrix.language == 'javascript-typescript' && env.skip != 'true'
        run: |
          curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node -v

      - name: Initialize CodeQL
        if: env.skip != 'true'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        if: env.skip != 'true' && env.FILES_TO_ANALYZE != ''
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}-${{ matrix.build-mode }}"
  
      - name: Debug SARIF JSON
        run: |
          jq '.' /home/runner/work/codeql/results/javascript.sarif | head -n 50

      - name: Extract Security 
        if: env.skip != 'true'
        run: |
          set -e
          ls -l /home/runner/work/codeql/results/
          sarif_file=$(find /home/runner/work/codeql/results -iname '*.sarif' | head -n 1)
          if [ ! -f "$sarif_file" ]; then
            echo "❌ SARIF file not found!"
            exit 1
          else
            echo "✅ Found SARIF file: $sarif_file"
          fi
          
          echo "Printing SARIF file preview:"
          cat "$sarif_file" | head -n 50  # Print first 50 lines
          
          echo "Extracting findings from: $sarif_file"
          
          changed_files=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr -d '[]"' | tr ',' '\n')
          echo "Changed files list:"
          echo "$changed_files"
          
          jq -r --argjson changed_files "$(echo "$changed_files" | jq -R . | jq -s .)" '
            .runs[].results[] |
            { rule: .ruleId, message: .message.text, file: .locations[].physicalLocation.artifactLocation.uri }
          ' "$sarif_file" > parsed_results.json
          
          echo "Parsed results output:"
          cat parsed_results.json
